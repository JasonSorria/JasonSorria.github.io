I"Wç<h4 id="‰∏≠ÊñáÁâàreadme-by-jasonsorria"><a href="https://github.com/JasonSorria/linux/blob/master/problem_logs/Coc-plugin/README_cn.md">‰∏≠ÊñáÁâàREADME</a> by <a href="https://github.com/JasonSorria">@JasonSorria</a></h4>

<h3 id="introduction">Introduction</h3>

<p>With the growth of Linux user, we can not avoid to not use <code class="highlighter-rouge">vim</code> and code become a common thing edited by <code class="highlighter-rouge">vim</code>. So i guess you must bored with <code class="highlighter-rouge">vim</code> and always ask why <code class="highlighter-rouge">vim</code> has not code completion. I also believe you have install or try some code completion plugins. Otherwise you will not find this article. Today i will share a powerful and easy-to-use plugin named COC.</p>

<blockquote>
  <p>Effect:</p>
</blockquote>

<p><img src="/images/posts/plugin/1.gif" alt="" /></p>

<h3 id="content">Content</h3>

<ul>
  <li>
    <p>What COC plugin</p>
  </li>
  <li>
    <p>Requirements</p>
  </li>
  <li>
    <p>Installation</p>

    <ul>
      <li>
        <p>install neovim</p>
      </li>
      <li>
        <p>transfer configuration file</p>
      </li>
      <li>
        <p>load plugins</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Add COC plugin</p>

    <ul>
      <li>
        <p>load some dependences</p>
      </li>
      <li>
        <p>add official code lines</p>
      </li>
      <li>
        <p>read its key-mapping</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Add language servers</p>

    <ul>
      <li>
        <p>configure JSON file</p>
      </li>
      <li>
        <p>install some language servers</p>
      </li>
      <li>
        <p>install code-check tools</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Debug</p>
  </li>
  <li>
    <p>Some useful tips</p>
  </li>
  <li>
    <p>Q&amp;A</p>
  </li>
</ul>

<hr />

<h3 id="what-coc-plugin">What COC plugin</h3>
<p>Coc is an intellisense engine for Vim/Neovim.True snippet and additional text editing support. Check out <a href="https://github.com/neoclide/coc.nvim/wiki">Wiki</a> for the vim interface. It support float window, which could convenient to browse your defined functions. Compared with YCM plugin, COC plugin is smaller and easier to install. Most important reason is that COC as a plugin it support add many language plugins like <code class="highlighter-rouge">C/C++</code> which is support code completion and see more <a href="https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions">Wiki</a> to get more details. It has many features like:</p>
<ul>
  <li>Fast: instant increment completion, increment buffer sync using buffer update events.</li>
  <li>Reliable: typed language, tested with CI.</li>
  <li>Featured: full LSP support</li>
  <li>Flexible: configured like VSCode, extensions work like in VSCode</li>
</ul>

<h3 id="quick-start">Quick Start</h3>

<h3 id="requirements">Requirements</h3>

<p><code class="highlighter-rouge">neovim</code> &gt;= 0.3.1 is required.</p>

<p><code class="highlighter-rouge">vim</code> &gt;= 8.0.1453 is required.</p>

<p>Use command <code class="highlighter-rouge">:version</code> or <code class="highlighter-rouge">$ vim --version</code> to checkout your vim version.</p>

<hr />

<h3 id="installation">Installation</h3>

<p><code class="highlighter-rouge">$ sudo pacman -S neovim</code>, if you are a neovim user you can ignore it. Beside your all vim configurations and vim-plug will be completely supported by neovim.</p>

<p><code class="highlighter-rouge">$ nvim file-name</code> to edit your file.</p>

<p>Your neovim‚Äôs local configuration home is <code class="highlighter-rouge">~/.config/nvim</code> if you have not this directory you can manually add it after your installation. Another thing about neovim is that you will find you have not the neovim‚Äôs configuration file, so <code class="highlighter-rouge">$ cd ~/.config/nvim &amp;&amp; nvim init.vim</code> and <code class="highlighter-rouge">init.vim</code> is your neovim‚Äôs configuration file like <code class="highlighter-rouge">.vimrc</code>. Only do you is copy your <code class="highlighter-rouge">.vimrc</code> into <code class="highlighter-rouge">~/.config/nvim</code> and <code class="highlighter-rouge">mv .vimrc init.vim</code>.</p>

<p>When you copy your vim‚Äôs configuration file into <code class="highlighter-rouge">~/.config/nvim</code>, you need <code class="highlighter-rouge">PluginInstall</code> again. If you forget how to install plugins you can see <a href="https://github.com/junegunn/vim-plug">his github</a> or my following configuration file contents:</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ nvim <span class="p">~</span><span class="sr">/.config/</span>nvim/init<span class="p">.</span><span class="k">vim</span>
# add the following lines into it<span class="p">.</span>
<span class="p">----</span>
<span class="k">if</span> empty<span class="p">(</span>glob<span class="p">(</span><span class="s1">'~/.config/nvim/autoload/plug.vim'</span><span class="p">))</span>
        <span class="k">silent</span> <span class="p">!</span>curl <span class="p">-</span>fLo <span class="p">~</span><span class="sr">/.config/</span>nvim<span class="sr">/autoload/</span>plug<span class="p">.</span><span class="k">vim</span> <span class="p">--</span>create<span class="p">-</span>dirs
<span class="se">                                \</span> https<span class="p">:</span><span class="sr">//</span>raw<span class="p">.</span>githubusercontent<span class="p">.</span><span class="k">com</span><span class="sr">/junegunn/</span><span class="k">vim</span><span class="p">-</span>plug<span class="sr">/master/</span>plug<span class="p">.</span><span class="k">vim</span>
        autocmd <span class="nb">VimEnter</span> * PlugInstall <span class="p">--</span><span class="k">sync</span> <span class="p">|</span> source $MYVIMRC
<span class="k">endif</span>
<span class="p">----</span>
# it will auto loading Pluginstall manager
</code></pre></div></div>
<p><code class="highlighter-rouge">$ nvim</code> you will see that:</p>

<p><img src="/images/posts/plugin/1.png" alt="" /></p>

<hr />

<h3 id="add-coc-plugin">Add COC plugin</h3>

<p>If you not willing to read this article you can refer this <a href="https://github.com/neoclide/coc.nvim">document</a> which is a official documents having more details.</p>

<p>Install nodejs and pyneovim when necessary:</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="p">-</span>sL install<span class="p">-</span>node<span class="p">.</span>now<span class="p">.</span><span class="k">sh</span>/lts <span class="p">|</span> bash
pip3 install neovim
npm install <span class="p">-</span><span class="k">g</span> neovim
<span class="p">----</span>
# Install nerd<span class="p">-</span>fonts <span class="p">(</span>actually it‚Äôs optional but it looks real good<span class="p">)</span>
</code></pre></div></div>

<p>Add the following line into <code class="highlighter-rouge">init.vim</code>.</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Plug <span class="s1">'neoclide/coc.nvim'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'branch'</span><span class="p">:</span> <span class="s1">'release'</span><span class="p">}</span> 
<span class="p">----</span>
# run `<span class="p">:</span>PlugIinstall` <span class="k">to</span> <span class="k">load</span> this plugin<span class="p">.</span> 
</code></pre></div></div>

<p>Some vim plugins could change keymappings. Use a command like :verbose imap <tab> to make sure that your keymap has taken effect.</tab></p>

<p>Add the following line into <code class="highlighter-rouge">init.vim</code> again. And do not just copy this lines, you need read some explanations at least</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">" if hidden is not set, TextEdit might fail.</span>
<span class="k">set</span> hidden

<span class="c">" Some servers have issues with backup files, see #649</span>
<span class="k">set</span> nobackup
<span class="k">set</span> nowritebackup

<span class="c">" Better display for messages</span>
<span class="k">set</span> cmdheight<span class="p">=</span><span class="m">2</span>

<span class="c">" You will have bad experience for diagnostic messages when it's default 4000.</span>
<span class="k">set</span> updatetime<span class="p">=</span><span class="m">300</span>

<span class="c">" don't give |ins-completion-menu| messages.</span>
<span class="k">set</span> shortmess<span class="p">+=</span><span class="k">c</span>

<span class="c">" always show signcolumns</span>
<span class="k">set</span> signcolumn<span class="p">=</span>yes

<span class="c">" Use tab for trigger completion with characters ahead and navigate.</span>
<span class="c">" Use command ':verbose imap &lt;tab&gt;' to make sure tab is not mapped by other plugin.</span>
inoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span>TAB<span class="p">&gt;</span>
<span class="se">      \</span> pumvisible<span class="p">()</span> ? <span class="s2">"\&lt;C-n&gt;"</span> <span class="p">:</span>
<span class="se">      \</span> <span class="p">&lt;</span>SID<span class="p">&gt;</span>check_back_space<span class="p">()</span> ? <span class="s2">"\&lt;TAB&gt;"</span> <span class="p">:</span>
<span class="se">      \</span> coc#refresh<span class="p">()</span>
inoremap <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>S<span class="p">-</span>TAB<span class="p">&gt;</span> pumvisible<span class="p">()</span> ? <span class="s2">"\&lt;C-p&gt;"</span> <span class="p">:</span> <span class="s2">"\&lt;C-h&gt;"</span>

<span class="k">function</span><span class="p">!</span> <span class="nv">s:check_back_space</span><span class="p">()</span> abort
  <span class="k">let</span> <span class="k">col</span> <span class="p">=</span> <span class="k">col</span><span class="p">(</span><span class="s1">'.'</span><span class="p">)</span> <span class="p">-</span> <span class="m">1</span>
  <span class="k">return</span> <span class="p">!</span><span class="k">col</span> <span class="p">||</span> getline<span class="p">(</span><span class="s1">'.'</span><span class="p">)[</span><span class="k">col</span> <span class="p">-</span> <span class="m">1</span><span class="p">]</span>  <span class="p">=~</span># <span class="s1">'\s'</span>
<span class="k">endfunction</span>

<span class="c">" Use &lt;c-space&gt; to trigger completion.</span>
inoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span><span class="k">c</span><span class="p">-</span>space<span class="p">&gt;</span> coc#refresh<span class="p">()</span>

<span class="c">" Use &lt;cr&gt; to confirm completion, `&lt;C-g&gt;u` means break undo chain at current position.</span>
<span class="c">" Coc only does snippet and additional edit on confirm.</span>
inoremap <span class="p">&lt;</span>expr<span class="p">&gt;</span> <span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span> pumvisible<span class="p">()</span> ? <span class="s2">"\&lt;C-y&gt;"</span> <span class="p">:</span> <span class="s2">"\&lt;C-g&gt;u\&lt;CR&gt;"</span>
<span class="c">" Or use `complete_info` if your vim support it, like:</span>
<span class="c">" inoremap &lt;expr&gt; &lt;cr&gt; complete_info()["selected"] != "-1" ? "\&lt;C-y&gt;" : "\&lt;C-g&gt;u\&lt;CR&gt;"</span>

<span class="c">" Use `[g` and `]g` to navigate diagnostics</span>
nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">[</span><span class="k">g</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>diagnostic<span class="p">-</span><span class="k">prev</span><span class="p">)</span>
nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">]</span><span class="k">g</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>diagnostic<span class="p">-</span>next<span class="p">)</span>

<span class="c">" Remap keys for gotos</span>
nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> gd <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>definition<span class="p">)</span>
nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> gy <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>type<span class="p">-</span>definition<span class="p">)</span>
nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> gi <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>implementation<span class="p">)</span>
nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="k">gr</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>references<span class="p">)</span>

<span class="c">" Use K to show documentation in preview window</span>
nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> K <span class="p">:</span><span class="k">call</span> <span class="p">&lt;</span>SID<span class="p">&gt;</span>show_documentation<span class="p">()&lt;</span>CR<span class="p">&gt;</span>

<span class="k">function</span><span class="p">!</span> <span class="nv">s:show_documentation</span><span class="p">()</span>
  <span class="k">if</span> <span class="p">(</span>index<span class="p">([</span><span class="s1">'vim'</span><span class="p">,</span><span class="s1">'help'</span><span class="p">],</span> &amp;<span class="k">filetype</span><span class="p">)</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">)</span>
    execute <span class="s1">'h '</span><span class="p">.</span>expand<span class="p">(</span><span class="s1">'&lt;cword&gt;'</span><span class="p">)</span>
  <span class="k">else</span>
    <span class="k">call</span> CocAction<span class="p">(</span><span class="s1">'doHover'</span><span class="p">)</span>
  <span class="k">endif</span>
<span class="k">endfunction</span>

<span class="c">" Highlight symbol under cursor on CursorHold</span>
autocmd <span class="nb">CursorHold</span> * <span class="k">silent</span> <span class="k">call</span> CocActionAsync<span class="p">(</span><span class="s1">'highlight'</span><span class="p">)</span>

<span class="c">" Remap for rename current word</span>
nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span>rn <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>rename<span class="p">)</span>

<span class="c">" Remap for format selected region</span>
xmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">f</span>  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>format<span class="p">-</span>selected<span class="p">)</span>
nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">f</span>  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>format<span class="p">-</span>selected<span class="p">)</span>

augroup mygroup
  autocmd<span class="p">!</span>
  <span class="c">" Setup formatexpr specified filetype(s).</span>
  autocmd <span class="nb">FileType</span> typescript<span class="p">,</span>json <span class="k">setl</span> formatexpr<span class="p">=</span>CocAction<span class="p">(</span><span class="s1">'formatSelected'</span><span class="p">)</span>
  <span class="c">" Update signature help on jump placeholder</span>
  autocmd <span class="nb">User</span> CocJumpPlaceholder <span class="k">call</span> CocActionAsync<span class="p">(</span><span class="s1">'showSignatureHelp'</span><span class="p">)</span>
augroup <span class="k">end</span>

<span class="c">" Remap for do codeAction of selected region, ex: `&lt;leader&gt;aap` for current paragraph</span>
xmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">a</span>  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>codeaction<span class="p">-</span>selected<span class="p">)</span>
nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">a</span>  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>codeaction<span class="p">-</span>selected<span class="p">)</span>

<span class="c">" Remap for do codeAction of current line</span>
nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span>ac  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>codeaction<span class="p">)</span>
<span class="c">" Fix autofix problem of current line</span>
nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span>qf  <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span><span class="k">fix</span><span class="p">-</span>current<span class="p">)</span>

<span class="c">" Create mappings for function text object, requires document symbols feature of languageserver.</span>
xmap <span class="k">if</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>funcobj<span class="p">-</span><span class="k">i</span><span class="p">)</span>
xmap af <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>funcobj<span class="p">-</span><span class="k">a</span><span class="p">)</span>
omap <span class="k">if</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>funcobj<span class="p">-</span><span class="k">i</span><span class="p">)</span>
omap af <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>funcobj<span class="p">-</span><span class="k">a</span><span class="p">)</span>

<span class="c">" Use &lt;TAB&gt; for select selections ranges, needs server support, like: coc-tsserver, coc-python</span>
nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>TAB<span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>range<span class="p">-</span>select<span class="p">)</span>
xmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>TAB<span class="p">&gt;</span> <span class="p">&lt;</span>Plug<span class="p">&gt;(</span>coc<span class="p">-</span>range<span class="p">-</span>select<span class="p">)</span>

<span class="c">" Use `:Format` to format current buffer</span>
command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span><span class="m">0</span> Format <span class="p">:</span><span class="k">call</span> CocAction<span class="p">(</span><span class="s1">'format'</span><span class="p">)</span>

<span class="c">" Use `:Fold` to fold current buffer</span>
command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? Fold <span class="p">:</span><span class="k">call</span>     CocAction<span class="p">(</span><span class="s1">'fold'</span><span class="p">,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>

<span class="c">" use `:OR` for organize import of current buffer</span>
command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span><span class="m">0</span> OR   <span class="p">:</span><span class="k">call</span>     CocAction<span class="p">(</span><span class="s1">'runCommand'</span><span class="p">,</span> <span class="s1">'editor.action.organizeImport'</span><span class="p">)</span>

<span class="c">" Add status line support, for integration with other plugin, checkout `:h coc-status`</span>
<span class="k">set</span> statusline^<span class="p">=</span>%<span class="p">{</span>coc#status<span class="p">()}</span>%<span class="p">{</span>get<span class="p">(</span><span class="k">b</span><span class="p">:,</span><span class="s1">'coc_current_function'</span><span class="p">,</span><span class="s1">''</span><span class="p">)}</span>

<span class="c">" Using CocList</span>
<span class="c">" Show all diagnostics</span>
nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>space<span class="p">&gt;</span><span class="k">a</span>  <span class="p">:&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>CocList diagnostics<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
<span class="c">" Manage extensions</span>
nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>space<span class="p">&gt;</span><span class="k">e</span>  <span class="p">:&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>CocList extensions<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
<span class="c">" Show commands</span>
nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>space<span class="p">&gt;</span><span class="k">c</span>  <span class="p">:&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>CocList commands<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
<span class="c">" Find symbol of current document</span>
nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>space<span class="p">&gt;</span><span class="k">o</span>  <span class="p">:&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>CocList outline<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
<span class="c">" Search workspace symbols</span>
nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>space<span class="p">&gt;</span>s  <span class="p">:&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>CocList <span class="p">-</span>I symbols<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
<span class="c">" Do default action for next item.</span>
nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>space<span class="p">&gt;</span><span class="k">j</span>  <span class="p">:&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>CocNext<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="c">" Do default action for previous item.</span>
nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>space<span class="p">&gt;</span><span class="k">k</span>  <span class="p">:&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>CocPrev<span class="p">&lt;</span>CR<span class="p">&gt;</span>
<span class="c">" Resume latest coc list</span>
nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>space<span class="p">&gt;</span><span class="k">p</span>  <span class="p">:&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>CocListResume<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</code></pre></div></div>
<p><strong>After do that you still have not the function of code completion</strong></p>

<hr />

<h3 id="add-language-servers">Add language servers</h3>

<p>You can see <a href="https://github.com/neoclide/coc.nvim/wiki/Language-servers">its official document</a> to get more information.</p>

<p><code class="highlighter-rouge">$ nvim ~/.config/nvim/coc-settings.json</code> and add the following line into it:(if you can <code class="highlighter-rouge">:CocConfig</code> add this lines too).</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
	</span><span class="nl">"yank.enableCompletion"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
	</span><span class="nl">"diagnostic.virtualText"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
	</span><span class="nl">"codeLens.enable"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
	</span><span class="nl">"suggest.detailMaxLength"</span><span class="p">:</span><span class="w"> </span><span class="mi">60</span><span class="p">,</span><span class="w">
	</span><span class="nl">"languageserver"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"lua"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"lua-lsp"</span><span class="p">,</span><span class="w">
			</span><span class="nl">"filetypes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"lua"</span><span class="p">]</span><span class="w">
		</span><span class="p">},</span><span class="w">
		</span><span class="nl">"golang"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gopls"</span><span class="p">,</span><span class="w">
			</span><span class="nl">"rootPatterns"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"go.mod"</span><span class="p">],</span><span class="w">
			</span><span class="nl">"filetypes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"go"</span><span class="p">]</span><span class="w">
		</span><span class="p">},</span><span class="w">
		</span><span class="nl">"bash"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bash-language-server"</span><span class="p">,</span><span class="w">
			</span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"start"</span><span class="p">],</span><span class="w">
			</span><span class="nl">"filetypes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"sh"</span><span class="p">],</span><span class="w">
			</span><span class="nl">"ignoredRootPaths"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
		</span><span class="p">},</span><span class="w">
		</span><span class="nl">"ccls"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ccls"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"filetypes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cpp"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cuda"</span><span class="p">,</span><span class="w"> </span><span class="s2">"objc"</span><span class="p">,</span><span class="w"> </span><span class="s2">"objcpp"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"rootPatterns"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">".ccls-root"</span><span class="p">,</span><span class="w"> </span><span class="s2">"compile_commands.json"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"initializationOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
         </span><span class="nl">"cache"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
           </span><span class="nl">"directory"</span><span class="p">:</span><span class="w"> </span><span class="s2">".ccls-cache"</span><span class="w">
         </span><span class="p">}</span><span class="w">
       </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Run <code class="highlighter-rouge">:CocInstall coc-pyls coc-json coc-html coc-css </code> to add needed language servers</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code>coc<span class="p">-</span>json <span class="k">for</span> json<span class="p">.</span>
coc<span class="p">-</span>tsserver <span class="k">for</span> javascript and typescript<span class="p">.</span>
coc<span class="p">-</span>html <span class="k">for</span> html<span class="p">,</span> handlebars and razor<span class="p">.</span>
coc<span class="p">-</span>css <span class="k">for</span> css<span class="p">,</span> scss and less<span class="p">.</span>
coc<span class="p">-</span>ember <span class="k">for</span> ember projects<span class="p">.</span>
coc<span class="p">-</span>vetur <span class="k">for</span> vue<span class="p">,</span> use vetur<span class="p">.</span>
coc<span class="p">-</span>phpls <span class="k">for</span> php<span class="p">,</span> use intelephense<span class="p">-</span>docs<span class="p">.</span>
coc<span class="p">-</span>java <span class="k">for</span> java<span class="p">,</span> use eclipse<span class="p">.</span>jdt<span class="p">.</span><span class="k">ls</span><span class="p">.</span>
coc<span class="p">-</span>solargraph <span class="k">for</span> <span class="k">ruby</span><span class="p">,</span> use solargraph<span class="p">.</span>
coc<span class="p">-</span>rls <span class="k">for</span> rust<span class="p">,</span> use Rust Language Server
coc<span class="p">-</span>rust<span class="p">-</span>analyzer <span class="k">for</span> rust<span class="p">,</span> use rust<span class="p">-</span>analyzer
coc<span class="p">-</span><span class="k">r</span><span class="p">-</span>lsp <span class="k">for</span> <span class="k">r</span><span class="p">,</span> use R languageserver<span class="p">.</span>
coc<span class="p">-</span>yaml <span class="k">for</span> yaml
coc<span class="p">-</span>python <span class="k">for</span> python<span class="p">,</span> extension forked from vscode<span class="p">-</span>python<span class="p">.</span>
coc<span class="p">-</span>highlight provides default document symbol highlighting and <span class="k">color</span> support<span class="p">.</span>
coc<span class="p">-</span>emmet provides emmet suggestions <span class="k">in</span> completion list<span class="p">.</span>
coc<span class="p">-</span>snippets provides snippets solution<span class="p">.</span>
coc<span class="p">-</span>lists provides some basic lists like fzf<span class="p">.</span><span class="k">vim</span><span class="p">.</span>
coc<span class="p">-</span>git provides git integration<span class="p">.</span>
coc<span class="p">-</span><span class="k">yank</span> provides <span class="k">yank</span> highlights &amp; <span class="k">history</span><span class="p">.</span>
coc<span class="p">-</span>fsharp <span class="k">for</span> fsharp<span class="p">.</span>
coc<span class="p">-</span>svg <span class="k">for</span> svg<span class="p">.</span>
coc<span class="p">-</span>tailwindcss <span class="k">for</span> tailwindcss<span class="p">.</span>
coc<span class="p">-</span>angular <span class="k">for</span> angular<span class="p">.</span>
coc<span class="p">-</span>vimlsp <span class="k">for</span> viml<span class="p">.</span>
coc<span class="p">-</span>xml <span class="k">for</span> xml<span class="p">,</span> use lsp4xml<span class="p">.</span>
coc<span class="p">-</span>elixir <span class="k">for</span> elixir<span class="p">,</span> based <span class="k">on</span> elixir<span class="p">-</span><span class="k">ls</span><span class="p">.</span>
coc<span class="p">-</span>erlang_ls <span class="k">for</span> erlang<span class="p">,</span> based <span class="k">on</span> erlang_ls
coc<span class="p">-</span>tabnine <span class="k">for</span> tabnine<span class="p">.</span>
coc<span class="p">-</span>powershell <span class="k">for</span> PowerShellEditorService integration<span class="p">.</span>
coc<span class="p">-</span>omnisharp <span class="k">for</span> csharp and visualbasic<span class="p">.</span>
coc<span class="p">-</span>texlab <span class="k">for</span> LaTex using TexLab<span class="p">.</span>
coc<span class="p">-</span>lsp<span class="p">-</span>wl <span class="k">for</span> wolfram mathematica<span class="p">,</span> fork of vscode<span class="p">-</span>lsp<span class="p">-</span>wl<span class="p">.</span>
coc<span class="p">-</span>flow <span class="k">for</span> flow
coc<span class="p">-</span>reason <span class="k">for</span> reasonml
coc<span class="p">-</span>svelte <span class="k">for</span> svelte
coc<span class="p">-</span>flutter <span class="k">for</span> flutter
coc<span class="p">-</span>pyright Pyright extension
coc<span class="p">-</span>markdownlint <span class="k">for</span> markdown linting
coc<span class="p">-</span>ecdict ECDICT extension
coc<span class="p">-</span>metals <span class="k">for</span> Scala using Metals
coc<span class="p">-</span>explorer <span class="k">file</span> explorer extension
coc<span class="p">-</span>calc expression calculation extension
</code></pre></div></div>

<p><code class="highlighter-rouge">$ sudo pacman -S ccls-git</code> the code completion of C/C++ need its support(it is very importance!). And see <a href="https://github.com/MaskRay/ccls/wiki/Build">its official document</a> to see more detail</p>

<hr />

<h3 id="debug">Debug</h3>

<p>Run <code class="highlighter-rouge">:checkhealth</code> in neovim to error information and follow its tips to modify some lost dependences.</p>

<p>Run <code class="highlighter-rouge">:message</code> in neovim to find latest error logs.</p>

<p>If you have installed another code comletion plugins, i advise you delete all of them becuase i once installed a code comletion plugin named <code class="highlighter-rouge">YouCompleteMe</code> but i fail to configure it. When i delete all of its files my plugin just returned to normal.</p>

<hr />

<h3 id="some-useful-tips">Some useful tips</h3>

<p>Do <code class="highlighter-rouge">$ pip3 install flake8</code> for coding check like that:</p>

<p><img src="/images/posts/plugin/2.png" alt="" /></p>

<p>Run <code class="highlighter-rouge">$ sudo pacman -S ctags</code> for function/class/variable list. When your define your function at <code class="highlighter-rouge">C/C++</code> you can see some function/class/variale list, which is so convenient.</p>

<hr />

<h3 id="qa">Q&amp;A</h3>

<blockquote>
  <p>Q:ccls server wont start, exits with code null.</p>
</blockquote>

<blockquote>
  <p>A:you can refer this <a href="https://github.com/neoclide/coc.nvim/issues/676">solution</a>, i hope it can help you.</p>
</blockquote>
:ET